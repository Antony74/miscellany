#pragma warning (disable: 4506) // v8 can probably be forgiven this nonsense: no definition for inline function 'v8::Persistent<T> v8::Persistent<T>::New(v8::Handle<T>)
#pragma warning (disable: 4530) // This is a node-gyp issue: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc

#include <node.h>
#include <v8.h>
using namespace v8;

Persistent<Object> menu;

Handle<Value> createMenu(const Arguments& args)
{
	HandleScope scope;

	// Argument checking omitted for brevity
	Local<Object> obj = args[0]->ToObject();
	menu = Persistent<Object>::New(obj);

	return scope.Close(Undefined());
}

Handle<Value> simulateClick(const Arguments& args)
{
	HandleScope scope;

	// Type checking omitted for brevity
	Local<Value> vFunction = menu->Get(0)->ToObject()->Get(String::NewSymbol("function"));

	Persistent<Context> context = Context::New();
	Context::Scope context_scope(context);
	Handle<Object> global = context->Global();

	Local<Function> function = Function::Cast(*vFunction);
	function->Call(global, 0, NULL);

	return scope.Close(Undefined());
}

void init(Handle<Object> exports)
{
	exports->Set(String::NewSymbol("createMenu"),  FunctionTemplate::New(createMenu)->GetFunction());
	exports->Set(String::NewSymbol("simulateClick"),  FunctionTemplate::New(simulateClick)->GetFunction());
}

NODE_MODULE(example, init)
